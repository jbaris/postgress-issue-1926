package org.example;

import org.junit.Assert;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.postgresql.jdbc.PgConnection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.utility.MountableFile;

import java.sql.*;

public class PostgresIssue1926 {

    private static final Logger LOGGER = LoggerFactory.getLogger(PostgresIssue1926.class);

    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15.4-alpine")
            .withCopyFileToContainer(
                    MountableFile.forClasspathResource("init.sql"),
                    "/docker-entrypoint-initdb.d/init.sql"
            );

    @BeforeAll
    static void beforeAll() {
        postgres.start();
    }

    @AfterAll
    static void afterAll() {
        postgres.stop();
    }

    @Test
    public void test() throws Exception {
        try (Connection conn = DriverManager.getConnection(postgres.getJdbcUrl(), postgres.getUsername(), postgres.getPassword())) {
            // Inserts many rows
            for(int i = 0; i < 12000; i++) {
                final Statement st = conn.createStatement();
                final int updated = st.executeUpdate("insert into public.\"TEMP\" (\"ID\", \"PARAM\") values
                Assert.assertEquals(1, updated);
            }

            // To avoid OOM, call:  mvn clean package -DconnectionDefaultFetchSize=50
            final Integer sysProp = Integer.getInteger("connectionDefaultFetchSize");
            if(sysProp!= null) {
                LOGGER.info("Setting connectionDefaultFetchSize: " + sysProp);
                ((PgConnection) conn).setDefaultFetchSize(sysProp);
            }

            // Fetch rows
            conn.setAutoCommit(false);
            CallableStatement cs = conn.prepareCall("call TEST_REFCURSOR(?)");
            cs.setFetchSize(50); // this line does not work
            cs.registerOutParameter(1, 2012);
            cs.execute();
            ResultSet rs = (ResultSet) cs.getObject(1);
            int count = 0;
            while (rs.next()) {
                long id = rs.getLong("ID");
                Assert.assertEquals(1, id);
                count++;
            }
            LOGGER.info("Row count: " + count);
        }
    }

}
